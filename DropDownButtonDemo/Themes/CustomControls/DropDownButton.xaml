<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Controls="clr-namespace:DropDownButtonDemo.Controls"
                    xmlns:Utilities="clr-namespace:DropDownButtonDemo.Controls.Utilities"
                    xmlns:Converters="clr-namespace:DropDownButtonDemo.Converters"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:local="clr-namespace:DropDownButtonDemo.Themes.CustomControls">

    <Style TargetType="{x:Type Controls:DropDownButton}">
        <!-- Note that the x:Key property must be omitted in order to apply the style implicitly! -->

        <Style.Resources>
            <ResourceDictionary>

                <ResourceDictionary.MergedDictionaries>
                    <ResourceDictionary Source="/DropDownButtonDemo;component/Styles/Controls/ToggleButton.xaml"/>
                    <ResourceDictionary Source="/DropDownButtonDemo;component/Resources/Shapes/Chevron.xaml"/>
                </ResourceDictionary.MergedDictionaries>

                <!-- Color of the dropdown arrow -->
                <SolidColorBrush x:Key="DropDownArrowBrush" Color="#303030"/>

                <!-- Stroke thickness of the dropdown arrow -->
                <system:Double x:Key="DropDownArrowStrokeThickness">1</system:Double>

            </ResourceDictionary>
        </Style.Resources>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:DropDownButton}">

                    <ToggleButton x:Name="PART_Button"
                                  Style="{TemplateBinding ButtonStyle}"
                                  IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">

                        <DockPanel x:Name="PART_DockPanel" LastChildFill="True"
                                   Focusable="False">

                            <Path x:Name="PART_Arrow"
                                  Data="{StaticResource DownwardChevron}"
                                  Stroke="{StaticResource DropDownArrowBrush}"
                                  StrokeThickness="{StaticResource DropDownArrowStrokeThickness}"/>

                            <ContentPresenter x:Name="PART_ButtonContent"
                                              Content="{TemplateBinding Content}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                        </DockPanel>

                        <ToggleButton.ContextMenu>

                            <ContextMenu x:Name="PART_Menu" Style="{TemplateBinding MenuStyle}"
                                         MinWidth="{TemplateBinding ActualWidth}"
                                         IsOpen="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" StaysOpen="False"
                                         PlacementTarget="{TemplateBinding MenuPlacementTarget}"
                                         Placement="Custom" CustomPopupPlacementCallback="{x:Static Utilities:DropDownHelper.MenuPopupPlacementCallback}"
                                         HorizontalOffset="{Binding Path=Margin.Left, RelativeSource={RelativeSource Mode=Self}, Converter={Converters:NumericInverter}}"
                                         VerticalOffset="{Binding Path=Margin.Top, RelativeSource={RelativeSource Mode=Self}, Converter={Converters:NumericInverter}}"
                                         ItemContainerStyle="{TemplateBinding ItemContainerStyle}"
                                         ItemContainerStyleSelector="{TemplateBinding ItemContainerStyleSelector}"
                                         ItemStringFormat="{TemplateBinding ItemStringFormat}"
                                         ItemTemplate="{TemplateBinding ItemTemplate}"
                                         ItemTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                         ItemsPanel="{TemplateBinding ItemsPanel}"
                                         ItemsSource="{TemplateBinding ItemsSource}"/>

                        </ToggleButton.ContextMenu>

                    </ToggleButton>

                    <ControlTemplate.Triggers>

                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter TargetName="PART_Arrow" Property="DockPanel.Dock" Value="Right"/>
                            <Setter TargetName="PART_Arrow" Property="VerticalAlignment" Value="Center"/>
                            <Setter TargetName="PART_Arrow" Property="Margin" Value="6 0 0 0"/>
                        </Trigger>

                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter TargetName="PART_Arrow" Property="DockPanel.Dock" Value="Bottom"/>
                            <Setter TargetName="PART_Arrow" Property="HorizontalAlignment" Value="Center"/>
                            <Setter TargetName="PART_Arrow" Property="Margin" Value="0 6 0 0"/>
                        </Trigger>

                        <!-- Remove margin from dropdown arrow if button content is not set -->
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter TargetName="PART_Arrow" Property="Margin" Value="0"/>
                        </Trigger>

                        <!-- Disable hit testing for button when the dropdown menu is opened -->
                        <!-- This prevents the menu from reopening immediately after the button has been clicked -->
                        <EventTrigger SourceName="PART_Menu" RoutedEvent="ContextMenu.Opened">
                            <BeginStoryboard>
                                <Storyboard>
                                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_Button" Storyboard.TargetProperty="IsHitTestVisible">
                                        <DiscreteBooleanKeyFrame KeyTime="0" Value="False"/>
                                    </BooleanAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                        <!-- Re-enable hit testing for button when the dropdown menu is closed -->
                        <EventTrigger SourceName="PART_Menu" RoutedEvent="ContextMenu.Closed">
                            <BeginStoryboard>
                                <Storyboard>
                                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_Button" Storyboard.TargetProperty="IsHitTestVisible">
                                        <DiscreteBooleanKeyFrame KeyTime="0" Value="True"/>
                                    </BooleanAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="PART_Arrow" Property="LayoutTransform">
                                <Setter.Value>
                                    <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleY="-1"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ButtonStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
                    <Setter Property="ClickMode" Value="Press"/>
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="MenuStyle" Value="{DynamicResource {x:Type ContextMenu}}"/>

        <!-- Avoid focus on the entire control, only the toggle button is focusable -->
        <Setter Property="Focusable" Value="False"/>

        <Setter Property="MenuPlacementTarget" Value="{Binding RelativeSource={RelativeSource Mode=Self}}"/>

    </Style>

</ResourceDictionary>
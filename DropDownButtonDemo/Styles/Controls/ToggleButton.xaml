<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:local="clr-namespace:DropDownButtonDemo.Styles.Controls">

    <Style TargetType="{x:Type ToggleButton}">
        <!-- Note that the x:Key property must be omitted in order to apply the style implicitly! -->

        <Style.Resources>

            <!-- Background color of button -->
            <SolidColorBrush x:Key="BackgroundBrush" Color="#FDFDFD"/>

            <!-- Background color of button when disabled -->
            <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#FDFDFD"/>

            <!-- Opacity of the button content when the button is disabled -->
            <system:Double x:Key="DisabledContentOpacity">0.35</system:Double>

            <!-- Padding between border and content in pixels -->
            <Thickness x:Key="ContentMargin" Left="10" Right="10" Top="8" Bottom="8"/>

            <!-- Background color of toggle button when checked and disabled -->
            <SolidColorBrush x:Key="DisabledCheckedBackgroundBrush" Color="#F0F0F0"/>

        </Style.Resources>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">

                    <Border x:Name="PART_Border"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}">

                        <ContentPresenter x:Name="PART_ContentPresenter"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                    </Border>

                    <ControlTemplate.Triggers>

                        <!-- Appearance for disabled button -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderBrush" Value="#E1E1E1"/>
                            <Setter Property="Background" Value="#FDFDFD"/>
                        </Trigger>

                        <!-- Appearance for active mouseover -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="BorderBrush" Value="#86BFA0"/>
                                <Setter Property="Background" Value="#D3F0E0"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>

                        <!-- Appearance for pressed button -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True"/>
                                <Condition Property="IsPressed" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="BorderBrush" Value="#3F8159"/>
                                <Setter Property="Background" Value="#86BFA0"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>

                        <!-- Appearance of checked button -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="#3F8159"/>
                            <Setter TargetName="PART_Border" Property="Background" Value="#86BFA0"/>
                        </Trigger>

                        <!-- Appearance of checked button when mouseover is active -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="PART_Border" Property="BorderBrush">
                                    <Setter.Value>
                                        <SolidColorBrush Color="#217346"/>
                                    </Setter.Value>
                                </Setter>
                            </MultiTrigger.Setters>
                        </MultiTrigger>

                        <!-- Appearance of button when checked and disabled -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="PART_Border" Property="BorderBrush" Value="#ABABAB"/>
                                <Setter TargetName="PART_Border" Property="Background" Value="{StaticResource DisabledCheckedBackgroundBrush}"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="BorderBrush" Value="#ABABAB"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{StaticResource BackgroundBrush}"/>

        <Setter Property="Padding" Value="{StaticResource ContentMargin}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>

        <Setter Property="UseLayoutRounding" Value="True"/>

    </Style>

</ResourceDictionary>